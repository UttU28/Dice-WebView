trigger:
- main

variables:
  imageName: 'myapp'
  azureSubscription: 'dicePipeline'
  acrName: 'myacr'
  webAppName: 'dicesaralapply'
  imageTag: 'latest'
  codeDirectory: 'src'
  imageRepository: 'imagename'
  containerRegistry: 'thisacr.azurecr.io'
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'
  codeScanResults: 'code-scan-results.json'
  trivyResultsPath: 'trivy-results.json'
  checkovResultsPath: 'checkov-results.json'

jobs:
- job: Build
  displayName: 'Build Container Image'
  pool:
    vmImage: 'ubuntu-latest'
  steps:
  - task: Docker@2
    displayName: Build and push an image to container registry
    inputs:
      containerRegistry: 'dockerSC'
      repository: '$(imageRepository)'
      command: 'push'
      Dockerfile: '**/Dockerfile'
      tags: '$(tag)'

- job: CodeScan
  displayName: 'Scan Code with CodeScan'
  dependsOn: Build
  pool:
    vmImage: 'ubuntu-latest'
  steps:
  - script: |
      echo Scanning code with CodeScan...
      codescan analyze --output $(codeScanResults) --source $(codeDirectory)
    displayName: 'Run CodeScan Analysis'

  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: '$(codeScanResults)'
      ArtifactName: 'code-scan-results'
      publishLocation: 'Container'

- job: CheckovScan
  displayName: 'Scan Infrastructure as Code with Checkov'
  dependsOn: Build
  pool:
    vmImage: 'ubuntu-latest'
  steps:
  - script: |
      echo Scanning infrastructure as code with Checkov...
      checkov -d $(codeDirectory) --output json > $(checkovResultsPath)
    displayName: 'Run Checkov Scan'

  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: '$(checkovResultsPath)'
      ArtifactName: 'checkov-results'
      publishLocation: 'Container'

- job: ContainerScan
  displayName: 'Scan Container Image Security with Trivy'
  dependsOn: Build
  pool:
    vmImage: 'ubuntu-latest'
  steps:
  - script: |
      echo Scanning container image with Trivy...
      trivy image --format json --output $(trivyResultsPath) $(acrName).azurecr.io/$(imageName):$(imageTag)
    displayName: 'Run Trivy Scan'

  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: '$(trivyResultsPath)'
      ArtifactName: 'trivy-results'
      publishLocation: 'Container'

# - job: ManualValidation
#   displayName: 'Manual Validation'
#   dependsOn: [CodeScan, CheckovScan, ContainerScan]
#   pool:
#     vmImage: 'ubuntu-latest'
#   steps:
#   - task: ManualValidation@1
#     timeoutInMinutes: 10
#     inputs:
#       notifyUsers: 'utsavmaan28@gmail.com'
#       instructions: 'Please review the scan results from CodeScan, Checkov, and Trivy before proceeding to deployment.'

- job: DeployToACR
  displayName: 'Deploy to Azure Container Registry'
  dependsOn: [CodeScan, CheckovScan, ContainerScan]
  pool:
    vmImage: 'ubuntu-latest'
  steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        containerRegistry: 'dockerSC'
        repository: '$(imageRepository)'
        command: 'push'
        Dockerfile: '**/Dockerfile'
        tags: '$(tag)'


- job: DeployToWebApp
  displayName: 'Deploy to Azure Web App'
  dependsOn: DeployToACR
  pool:
    vmImage: 'ubuntu-latest'
  steps:
  - task: AzureRmWebAppDeployment@4
    inputs:
      ConnectionType: 'AzureRM'
      azureSubscription: 'dicePipeline'
      appType: 'webAppContainer'
      WebAppName: '$(webAppName)'
      DockerNamespace: 'thisacr'
      DockerRepository: 'dicecontainer'
      DockerImageTag: '$(imageTag)'