trigger:
- main

variables:
  azureSubscription: 'dicePipeline'
  resourceGroupName: 'thistempresgrp'
  acrName: 'thisacr'
  webAppName: 'dicesaralapply'
  appServicePlanName: 'thisappserviceplan'
  imageRepository: 'imagename'
  imageTag: 'latest'
  codeDirectory: 'src'
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'
  containerRegistry: 'dockerSC'
  codeScanResults: 'code-scan-results.json'
  trivyResultsPath: 'trivy-results.json'
  checkovResultsPath: 'checkov-results.json'

jobs:
- job: Build
  displayName: 'Build Container Image'
  pool:
    vmImage: 'ubuntu-latest'
  steps:
  - task: Docker@2
    displayName: Build and push an image to container registry
    inputs:
      containerRegistry: '$(containerRegistry)'
      repository: '$(imageRepository)'
      command: 'build' 
      Dockerfile: '$(dockerfilePath)'
      tags: '$(imageTag)'
  

# - job: CodeScan
#   displayName: 'Scan Code with CodeScan'
#   dependsOn: Build
#   pool:
#     vmImage: 'ubuntu-latest'
#   steps:
#   - script: |
#       echo Scanning code with CodeScan...
#       codescan analyze --output $(codeScanResults) --source $(codeDirectory)
#     displayName: 'Run CodeScan Analysis'

#   - task: PublishBuildArtifacts@1
#     inputs:
#       PathtoPublish: '$(codeScanResults)'
#       ArtifactName: 'code-scan-results'
#       publishLocation: 'Container'

# - job: CheckovScan
#   displayName: 'Scan Infrastructure as Code with Checkov'
#   dependsOn: Build
#   pool:
#     vmImage: 'ubuntu-latest'
#   steps:
#   - script: |
#       echo Scanning infrastructure as code with Checkov...
#       checkov -d $(codeDirectory) --output json > $(checkovResultsPath)
#     displayName: 'Run Checkov Scan'

#   - task: PublishBuildArtifacts@1
#     inputs:
#       PathtoPublish: '$(checkovResultsPath)'
#       ArtifactName: 'checkov-results'
#       publishLocation: 'Container'

# - job: ContainerScan
#   displayName: 'Scan Container Image Security with Trivy'
#   dependsOn: Build
#   pool:
#     vmImage: 'ubuntu-latest'
#   steps:
#   - script: |
#       echo Scanning container image with Trivy...
#       trivy image --format json --output $(trivyResultsPath) $(acrName).azurecr.io/$(imageRepository):$(imageTag)
#     displayName: 'Run Trivy Scan'

#   - task: PublishBuildArtifacts@1
#     inputs:
#       PathtoPublish: '$(trivyResultsPath)'
#       ArtifactName: 'trivy-results'
#       publishLocation: 'Container'

- job: CreateAppServicePlan
  dependsOn: Build
  # dependsOn: [CodeScan, CheckovScan, ContainerScan]
  displayName: 'Create Azure App Service Plan'
  pool:
    vmImage: 'ubuntu-latest'
  steps:
  - task: AzureCLI@2
    inputs:
      azureSubscription: '$(azureSubscription)'
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: 'az appservice plan create --name $(appServicePlanName) --resource-group $(resourceGroupName) --sku B1 --is-linux'
    displayName: 'Create App Service Plan'

- job: DeployToACR
  displayName: 'Deploy to Azure Container Registry'
  dependsOn: CreateAppServicePlan
  pool:
    vmImage: 'ubuntu-latest'
  steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        containerRegistry: '$(containerRegistry)'
        repository: '$(imageRepository)'
        command: 'push'
        Dockerfile: '**/Dockerfile'
        tags: '$(tag)'


- job: DeployToWebApp
  displayName: 'Deploy to Azure Web App'
  dependsOn: DeployToACR
  pool:
    vmImage: 'ubuntu-latest'
  steps:
  - task: AzureRmWebAppDeployment@4
    inputs:
      ConnectionType: 'AzureRM'
      azureSubscription: '$(azureSubscription)'
      appType: 'webAppContainer'
      WebAppName: '$(webAppName)'
      DockerNamespace: 'thisacr'
      DockerRepository: 'dicecontainer'
      DockerImageTag: '$(imageTag)'