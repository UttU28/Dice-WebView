trigger:
- main
# - none

variables:
  azureSubscription: 'dicePipeline'
  resourceGroupName: 'thisresourcegroup'
  acrName: 'thisacr'
  webAppName: 'dicesaralapply1232'
  appServicePlanName: 'thisappserviceplan'
  imageName: 'dicewebview'
  imageTag: 'latest'
  imageRepository: '$(acrName).azurecr.io/$(imageName)'
  codeDirectory: 'src'
  subscriptionID: 'e4cf2944-5342-4787-b990-418828e39bfc'
  acrPassword: 'U9+ivfherZPq3+UWDnj1fxftpOqWUgXqspIc90YYFI+ACRBkerUy'
  artifactName: '$(imageName)_ARTIFACT'
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'
  containerRegistry: 'dockerSC'
  codeScanResults: 'code-scan-results.json'
  trivyResultsPath: 'trivy-results.json'
  checkovResultsPath: 'checkov-results.json'

jobs:
# - job: Build
#   displayName: 'Build Container Image'
#   pool:
#     vmImage: 'ubuntu-latest'
#   steps:
#   - task: Docker@2
#     displayName: Build and push an image to container registry
#     inputs:
#       containerRegistry: '$(containerRegistry)'
#       repository: '$(imageName)'
#       command: build
#       Dockerfile: '$(dockerfilePath)'
#       tags: '$(imageTag)art'
#   - task: Bash@3
#     displayName: Save Docker Image
#     inputs:
#       targetType: 'inline'
#       script: |
#         docker save $(imageRepository):$(imageTag)art -o $(Pipeline.Workspace)/$(imageName).tar
#   - task: PublishPipelineArtifact@1
#     displayName: Publish the Artifact
#     inputs:
#       targetPath: '$(Pipeline.Workspace)/$(imageName).tar'
#       artifact: '$(artifactName)'
#       publishLocation: 'pipeline'
  
# # - job: CreateAppServicePlan
# #   # dependsOn: Build
# #   # dependsOn: [CodeScan, CheckovScan, ContainerScan]
# #   displayName: 'Create Azure App Service Plan'
# #   pool:
# #     vmImage: 'ubuntu-latest'
# #   steps:

# #   - task: AzureCLI@2
# #     inputs:
# #       azureSubscription: '$(azureSubscription)'
# #       scriptType: 'bash'
# #       scriptLocation: 'inlineScript'
# #       inlineScript: |
# #         az appservice plan create --name $(appServicePlanName) --resource-group $(resourceGroupName) --sku B1 --is-linux
# #         az webapp create --resource-group $(resourceGroupName) --plan $(appServicePlanName) --name $(webAppName) --assign-identity '[system]' --role acrpull
# #         #  --container-image-name $(imageRepository)
# #         az webapp config set --resource-group $(resourceGroupName) --name $(webAppName) --generic-configurations '{"acrUseManagedIdentityCreds": true}'

# #         az webapp config container set --name $(webAppName) --resource-group $(resourceGroupName) --container-image-name $(imageRepository)
# #     displayName: 'Create App Service Plan'

# - job: DeployToACR
#   displayName: 'Deploy to Azure Container Registry'
#   dependsOn: Build
#   # dependsOn: CreateAppServicePlan
#   pool:
#     vmImage: 'ubuntu-latest'
#   steps:
#     - task: DownloadPipelineArtifact@2
#       inputs:
#         buildType: 'current'
#         artifact: '$(artifactName)'
#         targetPath: '$(Pipeline.Workspace)'
#     - task: Bash@3
#       displayName: Load Docker Image
#       inputs:
#         targetType: 'inline'
#         script: |      
#           docker load --input $(Pipeline.Workspace)/$(imageName).tar
#           docker tag $(imageRepository):$(imageTag)art $(imageRepository):$(imageTag)
#     - task: Docker@2
#       displayName: Push an image to container registry
#       inputs:
#         containerRegistry: '$(containerRegistry)'
#         repository: '$(imageName)'
#         command: push
#         Dockerfile: '$(dockerfilePath)'
#         tags: '$(imageTag)'

- job: TerraformTask
  displayName: 'Deploy to Azure Container Registry'
  # dependsOn: DeployToACR
  # dependsOn: CreateAppServicePlan
  pool:
    vmImage: 'ubuntu-latest'
  steps:
    - task: JasonBJohnson.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-installer.TerraformInstaller@1
      displayName: Install Terraform

    # - task: AzureCLI@2
    #   displayName: "Terraform INIT"
    #   inputs:
    #     azureSubscription: dicePipeline
    #     scriptType: bash
    #     addSpnToEnvironment: true
    #     scriptLocation: inlineScript
    #     inlineScript: |
    #       export ARM_CLIENT_ID=6ae75f68-d956-4829-a902-1e86d1998201
    #       export ARM_CLIENT_SECRET=vei8Q~tStpzTRKzDr2sPpAFUciprZJjWtvmvha_I
    #       export ARM_TENANT_ID=8e2dc2c8-cb38-4b25-91cf-cca92778bd6a
    #       export ARM_SUBSCRIPTION_ID=e4cf2944-5342-4787-b990-418828e39bfc
    
    #       terraform init
    
    - task: TerraformCLI@1
      displayName: Terraform INIT
      inputs:
        command: init
        azureSubscription: dicePipeline
        environmentServiceName: dicePipeline
        runAzLogin: true
        allowTelemetryCollection: true
    
    - task: TerraformCLI@1
      displayName: Terraform PLAN
      inputs:
        command: plan
        azureSubscription: dicePipeline
        environmentServiceName: dicePipeline
        runAzLogin: true
        allowTelemetryCollection: true